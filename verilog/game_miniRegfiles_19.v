/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_miniRegfiles_19 (
    input clk,
    input rst,
    input [3:0] wa,
    input we,
    input [15:0] data,
    input [3:0] ra,
    input [3:0] rb,
    output reg [15:0] ra_out,
    output reg [15:0] rb_out,
    output reg [15:0] aout,
    output reg [15:0] nout,
    output reg [15:0] zout,
    output reg [15:0] p1_out,
    output reg [15:0] p2_out,
    output reg [15:0] pout,
    output reg [15:0] mout
  );
  
  
  
  reg [15:0] M_a_d, M_a_q = 1'h0;
  reg [15:0] M_n_d, M_n_q = 1'h0;
  reg [15:0] M_x_d, M_x_q = 1'h0;
  reg [15:0] M_z_d, M_z_q = 1'h0;
  reg [15:0] M_p_d, M_p_q = 1'h0;
  reg [15:0] M_p1_d, M_p1_q = 1'h0;
  reg [15:0] M_p2_d, M_p2_q = 1'h0;
  reg [15:0] M_tp_d, M_tp_q = 1'h0;
  reg [15:0] M_m_d, M_m_q = 1'h0;
  
  always @* begin
    M_p2_d = M_p2_q;
    M_p1_d = M_p1_q;
    M_tp_d = M_tp_q;
    M_p_d = M_p_q;
    M_a_d = M_a_q;
    M_n_d = M_n_q;
    M_m_d = M_m_q;
    M_z_d = M_z_q;
    M_x_d = M_x_q;
    
    mout = M_m_q;
    pout = M_p_q;
    zout = M_z_q;
    aout = M_a_q;
    nout = M_n_q;
    p1_out = M_p1_q;
    p2_out = M_p2_q;
    if (we) begin
      
      case (wa)
        4'h0: begin
          M_a_d = data;
        end
        4'h1: begin
          M_n_d = data;
        end
        4'h2: begin
          M_x_d = data;
        end
        4'h3: begin
          M_z_d = data;
        end
        4'h4: begin
          M_p_d = data;
        end
        4'h5: begin
          M_p1_d = data;
        end
        4'h6: begin
          M_p2_d = data;
        end
        4'h7: begin
          M_tp_d = data;
        end
        4'h8: begin
          M_m_d = data;
        end
      endcase
    end
    
    case (ra)
      4'h0: begin
        ra_out = M_a_q;
      end
      4'h1: begin
        ra_out = M_n_q;
      end
      4'h2: begin
        ra_out = M_x_q;
      end
      4'h3: begin
        ra_out = M_z_q;
      end
      4'h4: begin
        ra_out = M_p_q;
      end
      4'h5: begin
        ra_out = M_p1_q;
      end
      4'h6: begin
        ra_out = M_p2_q;
      end
      4'h7: begin
        ra_out = M_tp_q;
      end
      4'h8: begin
        ra_out = M_m_q;
      end
      default: begin
        ra_out = 1'h0;
      end
    endcase
    
    case (rb)
      4'h0: begin
        rb_out = M_a_q;
      end
      4'h1: begin
        rb_out = M_n_q;
      end
      4'h2: begin
        rb_out = M_x_q;
      end
      4'h3: begin
        rb_out = M_z_q;
      end
      4'h4: begin
        rb_out = M_p_q;
      end
      4'h5: begin
        rb_out = M_p1_q;
      end
      4'h6: begin
        rb_out = M_p2_q;
      end
      4'h7: begin
        rb_out = M_tp_q;
      end
      4'h8: begin
        rb_out = M_m_q;
      end
      default: begin
        rb_out = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_a_q <= 1'h0;
      M_n_q <= 1'h0;
      M_x_q <= 1'h0;
      M_z_q <= 1'h0;
      M_p_q <= 1'h0;
      M_p1_q <= 1'h0;
      M_p2_q <= 1'h0;
      M_tp_q <= 1'h0;
      M_m_q <= 1'h0;
    end else begin
      M_a_q <= M_a_d;
      M_n_q <= M_n_d;
      M_x_q <= M_x_d;
      M_z_q <= M_z_d;
      M_p_q <= M_p_d;
      M_p1_q <= M_p1_d;
      M_p2_q <= M_p2_d;
      M_tp_q <= M_tp_d;
      M_m_q <= M_m_d;
    end
  end
  
endmodule
