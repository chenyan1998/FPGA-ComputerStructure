/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu16_17 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] alu,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_shifter_shift;
  shift16_25 shifter (
    .alufn(alufn[0+3-:4]),
    .a(a),
    .b(b[0+4-:5]),
    .shift(M_shifter_shift)
  );
  wire [16-1:0] M_addercomp_out;
  wire [1-1:0] M_addercomp_z;
  wire [1-1:0] M_addercomp_v;
  wire [1-1:0] M_addercomp_n;
  adder16_26 addercomp (
    .alufn(alufn[0+3-:4]),
    .a(a),
    .b(b),
    .out(M_addercomp_out),
    .z(M_addercomp_z),
    .v(M_addercomp_v),
    .n(M_addercomp_n)
  );
  wire [16-1:0] M_boolean_boole;
  boole16_27 boolean (
    .alufn(alufn[0+3-:4]),
    .a(a),
    .b(b),
    .boole(M_boolean_boole)
  );
  wire [16-1:0] M_comparator_cmp;
  compare16_28 comparator (
    .alufn(alufn[0+3-:4]),
    .z(M_addercomp_z),
    .v(M_addercomp_v),
    .n(M_addercomp_n),
    .cmp(M_comparator_cmp)
  );
  
  always @* begin
    z = M_addercomp_z;
    v = M_addercomp_v;
    n = M_addercomp_n;
    
    case (alufn[4+1-:2])
      2'h0: begin
        alu = M_addercomp_out;
      end
      2'h1: begin
        alu = M_boolean_boole;
      end
      2'h2: begin
        alu = M_shifter_shift;
      end
      2'h3: begin
        alu = M_comparator_cmp;
      end
      default: begin
        alu = 16'h0000;
      end
    endcase
  end
endmodule
